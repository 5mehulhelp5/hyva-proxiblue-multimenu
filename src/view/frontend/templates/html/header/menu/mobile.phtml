<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\Navigation;
use Magento\Framework\View\Element\Template;
use Magento\Framework\Escaper;

/** @var Template $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */

/** @var Navigation $viewModelNavigation */
$viewModelNavigation = $viewModels->require(Navigation::class);

$uniqueId = '_' . uniqid();

// Order is important here: 1. build the menu data, 2. then set the cache tags from the view model identities
$menuItems = $viewModelNavigation->getNavigation(4);
$block->setData('cache_tags', $viewModelNavigation->getIdentities());

?>
<div id="nav-mobile" x-data="initMenuMobile<?= $escaper->escapeHtml($uniqueId) ?>()"
     class="nav-mobile z-20 order-2 sm:order-1 lg:order-2 navigation lg:hidden"
>
    <!-- mobile -->
    <div id="nav-mobile-scroll" @load.window="setActiveMenu($el)"
         class="bg-container-lighter"
         :class="{'fixed top-0 left-0 w-full' : open}"
         @toggle-mobile-menu.window="open = !open"
         @keydown.window.escape="open=false"
         @click="handleMobileOpenMenu($event)"
    >
        <div class="flex items-baseline justify-between menu-icon">
            <div class="flex justify-end w-full">
                <a @click="$dispatch('toggle-mobile-menu')"
                   class="flex items-center justify-center cursor-pointer"
                   :class="{ 'ml-auto': open }">
                    <svg class="hidden w-16 h-16 p-4 fill-current"
                         :class="{ 'hidden' : !open, 'block': open }"
                         xmlns="http://www.w3.org/2000/svg" width="20" height="20"
                         viewBox="0 0 20 20">
                        <path fill-rule="evenodd" clip-rule="evenodd"
                              d="M18.278 16.864a1 1 0 0 1-1.414 1.414l-4.829-4.828-4.828 4.828a1 1 0 0
                          1-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 0 1 1.414-1.414l4.829 4.828
                          4.828-4.828a1 1 0 1 1 1.414 1.414l-4.828 4.829 4.828 4.828z">
                        </path>
                    </svg>
                    <svg class="block w-12 h-12 p-3 fill-current"
                         :class="{ 'hidden' : open, 'block': !open }"
                         xmlns="http://www.w3.org/2000/svg" width="20" height="20"
                         viewBox="0 0 20 20">
                        <path
                            d="M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z">
                        </path>
                    </svg>
                </a>
            </div>
        </div>

        <nav id="nav-mobile-container"
             class="hidden w-full duration-150 ease-in-out transform border-t transition-display border-container"
             :class="{ 'hidden' : !open }">
        </nav>
    </div>
</div>
<script>
    'use strict';

    const initMenuMobile<?= $escaper->escapeHtml($uniqueId) ?> = () => {
        return {
            mobilePanelActiveId: null,
            hoverPanelActiveId: null,
            open: false,
            setActiveMenu(menuNode) {
                Array.from(menuNode.querySelectorAll('a')).filter(link => {
                    return link.href === window.location.href.split('?')[0];
                }).map(item => {
                    item.classList.add('underline');
                    item.closest('div.level-0') &&
                    item.closest('div.level-0').querySelector('a.level-0').classList.add('underline');
                });
            },
            checkSlideDirection(event) {
                let domElm = event.target
                if (domElm.nextElementSibling) {
                    let UlElm = domElm.nextElementSibling;
                    return new Promise((resolve, reject) => {
                        UlElm.classList.remove('slide-to-left');
                        UlElm.classList.remove('slide-to-right')
                        return resolve();
                    })
                        .then(() => {
                            if ((domElm.getBoundingClientRect().right + UlElm.offsetWidth) > window.innerWidth) {
                                UlElm.style.zIndex = -1;
                                UlElm.classList.add('slide-to-left')
                                this.slideToLeft = true;
                            } else {
                                UlElm.classList.add('slide-to-right');
                                this.slideToLeft = false;
                            }
                        });

                }
            },
            handleMobileOpenMenu(event) {
                this.moveMenuInDom();
                if (event.target.localName == 'svg') {
                    var domElm = event.target.parentElement.parentElement;
                } else {
                    var domElm = event.target.parentElement.parentElement.parentElement;
                }
                if (domElm.nextElementSibling) {
                    let UlElm = domElm.nextElementSibling;
                    let parent = domElm.offsetParent
                    if (parent.classList.contains('menu-active')) {
                        parent.classList.remove('menu-active');
                        domElm.classList.remove('menu-active');
                        UlElm.classList.remove('open-down');
                    } else {
                        parent.classList.add('menu-active');
                        domElm.classList.add('menu-active');
                        UlElm.classList.add('open-down');
                    }

                }

            },
            moveMenuInDom() {
                if (this.open === true) {
                    this.manipulateDOM('nav-mobile-container','nav-desktop-container')
                    document.getElementById('html-body').classList.add('fixed-position')
                    document.getElementById('nav-mobile-scroll').classList.add('mobile-scroll')
                } else {
                    this.manipulateDOM('nav-desktop-container','nav-mobile-container')
                    document.getElementById('html-body').classList.remove('fixed-position')
                    document.getElementById('nav-mobile-scroll').classList.remove('mobile-scroll')
                }
            },
            manipulateDOM(to,from) {
                var NavElm = document.getElementById(to);
                if (NavElm.innerHTML.trim() == '') {
                    let srcElm = document.getElementById(from);
                    return new Promise((resolve, reject) => {
                        NavElm.append(...srcElm.childNodes);
                        return resolve();
                    })
                        .then(() => {
                            Alpine.discoverUninitializedComponents(function (el) {
                                Alpine.initializeComponent(el)
                            })
                        });
                }
            }
        }
    }
</script>
